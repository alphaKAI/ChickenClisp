(load "samples/base64")

(def-var authorizeKeys '("oauth_consumer_key" "oauth_nonce" "oauth_signature_method" "oauth_timestamp" "oauth_token" "oauth_version"))
(def-var baseUrl "https://api.twitter.com/1.1/")

(def buildParams (additionalParam)
  (begin
    (def-var now (get-current-unixtime))
    (make-hash params)
    (for-each (lambda (pair)
                      (begin
                        (def-var key   (car pair))
                        (def-var value (car (cdr pair)))
                        (hash-set-value params key value)))
      '((cons "oauth_consumer_key"     consumerKey)
        (cons "oauth_nonce"            (random-uuid))
        (cons "oauth_signature_method" "HMAC-SHA1")
        (cons "oauth_timestamp"        now)
        (cons "oauth_token"            accessToken)
        (cons "oauth_version"          "1.0")))

    (def-var adp-is-null
      (if (is-hash? additionalParam)
        false
        (= "null" additionalParam)))

    (set params (if adp-is-null
                    params
                    (begin
                      (for-each (lambda (key) (hash-set-value params key (hash-get-value additionalParam key)))
                                (hash-get-keys additionalParam))
                      params)))

    (for-each (lambda (key) (hash-set-value params key (url-encode-component (hash-get-value params key))))
              (hash-get-keys params))

    params))

(def signature (method url params)
  (begin
    (def-var query (string-join (map (lambda (k) (string-concat k "=" (hash-get-value params k))) (sort (hash-get-keys params))) "&"))
    (def-var key   (string-join (map (lambda (x) (url-encode-component x)) '(consumerSecret accessTokenSecret)) "&"))
    (def-var base  (string-join (map (lambda (x) (url-encode-component x)) '(method url query)) "&"))
    (def-var oauthSignature (url-encode-component (base64encode (ubytes-to-integers (hmac-sha1 key base)))))

    oauthSignature))

(def request (type endPoint paramsArgument)
  (begin
    (def-var method
      (if (|| (= type "GET") (= type "get"))
        "GET"
        "POST"))

    (def-var params (buildParams paramsArgument))
    (def-var url    (string-concat baseUrl endPoint))
    (def-var oauthSignature (signature method url params))
    (hash-set-value params "oauth_signature" oauthSignature)

    (def-var authorize (string-concat "OAuth " 
                                      (string-join (map (lambda (k) (string-concat k "=" (hash-get-value params k)))
                                                        authorizeKeys)
                                                   ",")))
    (def-var path      (string-join (map (lambda (k) (string-concat k "=" (hash-get-value params k)))
                                         (hash-get-keys params))
                                    "&"))

    (def-var header (new-hash))
    (hash-set-value header "Authorization" authorize)

    (if (= method "GET")
      (curl-get-string (string-concat url "?" path) header)
      (curl-post-string url path header))))